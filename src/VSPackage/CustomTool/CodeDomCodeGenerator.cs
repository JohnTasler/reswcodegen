using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;
using System.Reflection;
using System.Text;
using Microsoft.CSharp;

namespace ChristianHelle.DeveloperTools.CodeGenerators.Resw.VSPackage.CustomTool
{
    public class CodeDomCodeGenerator : CodeGenerator, IDisposable
    {
        private readonly TypeAttributes? classAccessibility;
        private readonly string className;
        private readonly CodeNamespace codeNamespace;
        private readonly CodeCompileUnit compileUnit;
        private readonly CodeDomProvider provider;
        private readonly bool ownsProvider;

        public CodeDomCodeGenerator(IResourceParser resourceParser,
                                    string className,
                                    string defaultNamespace,
                                    CodeDomProvider codeDomProvider = null,
                                    TypeAttributes? classAccessibility = null)
            : base(resourceParser, defaultNamespace)
        {
            this.className = className;
            this.classAccessibility = classAccessibility;
            compileUnit = new CodeCompileUnit();
            provider = codeDomProvider ?? new CSharpCodeProvider();
            ownsProvider = codeDomProvider is null;
            codeNamespace = new CodeNamespace(defaultNamespace);
        }

        public override string GenerateCode()
        {
            codeNamespace.Comments.Add(new CodeCommentStatement( "---------------------------------------------------------------------------------------"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "<auto-generated>"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    This code was generated by ResW File Code Generator (http://bit.ly/reswcodegen)"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    ResW File Code Generator was written by Christian Resma Helle"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    and is under GNU General Public License version 2 (GPLv2)"));
            codeNamespace.Comments.Add(new CodeCommentStatement( string.Empty));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    This code contains a helper class exposing property representations"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    of the string resources defined in the specified .ResW file"));
            codeNamespace.Comments.Add(new CodeCommentStatement( string.Empty));
            codeNamespace.Comments.Add(new CodeCommentStatement( "    Code generation environment:"));
            codeNamespace.Comments.Add(new CodeCommentStatement($"        Time and Date: {DateTime.Now:G} {TimeZoneInfo.Local.DisplayName}"));
            codeNamespace.Comments.Add(new CodeCommentStatement($"        Computer Name: {Environment.ExpandEnvironmentVariables("%COMPUTERNAME%.%USERDNSDOMAIN%").ToLower()}"));
            codeNamespace.Comments.Add(new CodeCommentStatement($"        User Name    : {Environment.ExpandEnvironmentVariables("%USERDOMAIN%\\%USERNAME%")}"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "</auto-generated>"));
            codeNamespace.Comments.Add(new CodeCommentStatement( "---------------------------------------------------------------------------------------"));

            var targetClass = new CodeTypeDeclaration(className)
            {
                IsClass = true,
                IsPartial = true,
                TypeAttributes = TypeAttributes.Sealed | (classAccessibility ?? TypeAttributes.Public),
                Attributes = MemberAttributes.Public | MemberAttributes.Static | MemberAttributes.Final
            };

            const string resourceLoaderType = "Windows.ApplicationModel.Resources.ResourceLoader";
            var resourceLoaderTypeReference = new CodeTypeReference(resourceLoaderType, CodeTypeReferenceOptions.GlobalReference);
            const string resourceLoaderFieldName = "resourceLoader";
            var resourceLoaderField = new CodeMemberField(resourceLoaderTypeReference, resourceLoaderFieldName)
            {
                Attributes = MemberAttributes.Private | MemberAttributes.Static | MemberAttributes.Final
            };
            targetClass.Members.Add(resourceLoaderField);

            var resourceLoaderProperty = new CodeMemberProperty
            {
                Name = "Resource",
                Attributes = MemberAttributes.Public | MemberAttributes.Static,
                HasGet = true,
                Type = resourceLoaderTypeReference
            };

            resourceLoaderProperty.Comments.Add(new CodeCommentStatement("<summary>", true));
            resourceLoaderProperty.Comments.Add(new CodeCommentStatement("Get or set ResourceLoader implementation", true));
            resourceLoaderProperty.Comments.Add(new CodeCommentStatement("</summary>", true));
            resourceLoaderProperty.GetStatements.Add(
                new CodeConditionStatement(
                    new CodeBinaryOperatorExpression(
                        new CodeVariableReferenceExpression(resourceLoaderFieldName),
                        CodeBinaryOperatorType.IdentityEquality,
                        new CodePrimitiveExpression(null)),
                    new CodeExpressionStatement(
                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(className), "Initialize")))));
            resourceLoaderProperty.GetStatements.Add(new CodeMethodReturnStatement(new CodeFieldReferenceExpression(null, "resourceLoader")));
            resourceLoaderProperty.SetStatements.Add(
                new CodeAssignStatement(
                    new CodeVariableReferenceExpression(resourceLoaderFieldName),
                    new CodePropertySetValueReferenceExpression()));
            targetClass.Members.Add(resourceLoaderProperty);

            var initializeResourceLoader = new CodeMemberMethod
            {
                Name = "Initialize",
                Attributes = MemberAttributes.Public | MemberAttributes.Static
            };

            var executingAssemblyVar = new CodeVariableDeclarationStatement(typeof(string), "executingAssemblyName");
            var executingAssemblyInit = new CodeAssignStatement(new CodeVariableReferenceExpression("executingAssemblyName"),
                                                                new CodePropertyReferenceExpression(new CodeMethodInvokeExpression(new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(new CodeTypeReference("System.Reflection.Assembly", CodeTypeReferenceOptions.GlobalReference)), "GetEntryAssembly"), "GetName"), "Name"));

            var currentAssemblyVar = new CodeVariableDeclarationStatement(typeof(string), "currentAssemblyName");
            var currentAssemblyInit = new CodeAssignStatement(new CodeVariableReferenceExpression("currentAssemblyName"),
                                                              new CodePropertyReferenceExpression(new CodeTypeOfExpression(className), "AssemblyQualifiedName"));
            var currentAssemblySplit = new CodeVariableDeclarationStatement(typeof(string[]), "currentAssemblySplit");
            var currentAssemblyInit2 = new CodeAssignStatement(new CodeVariableReferenceExpression("currentAssemblySplit"),
                                                               new CodeMethodInvokeExpression(new CodeVariableReferenceExpression("currentAssemblyName"),
                                                                                              "Split",
                                                                                              new CodePrimitiveExpression(',')));
            var currentAssemblyInit3 = new CodeAssignStatement(new CodeVariableReferenceExpression("currentAssemblyName"),
                                                               new CodeMethodInvokeExpression(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("currentAssemblySplit"),
                                                                                                                             new CodePrimitiveExpression(1)), "Trim"));

            var resourceLoaderTypeReferenceExpression = new CodeTypeReferenceExpression(resourceLoaderTypeReference);

            var coreWindowIsNotNullStatements = new CodeConditionStatement(
                new CodeSnippetExpression("executingAssemblyName.Equals(currentAssemblyName)"),
                new CodeStatement[] // true
                {
                    new CodeAssignStatement(new CodeFieldReferenceExpression(null, "resourceLoader"),
                                            new CodeMethodInvokeExpression(resourceLoaderTypeReferenceExpression,
                                                                           "GetForCurrentView",
                                                                           new CodeSnippetExpression("\"" + className + "\"")))
                },
                new CodeStatement[] // false
                {
                    new CodeAssignStatement(new CodeFieldReferenceExpression(null, "resourceLoader"),
                                            new CodeMethodInvokeExpression(resourceLoaderTypeReferenceExpression,
                                                                           "GetForCurrentView",
                                                                           new CodeSnippetExpression("currentAssemblyName + \"/" + className + "\"")))
                });

            var coreWindowIsNullStatements = new CodeConditionStatement(
                new CodeSnippetExpression("executingAssemblyName.Equals(currentAssemblyName)"),
                new CodeStatement[] // true
                {
                    new CodeAssignStatement(new CodeFieldReferenceExpression(null, "resourceLoader"),
                                            new CodeMethodInvokeExpression(resourceLoaderTypeReferenceExpression,
                                                                           "GetForViewIndependentUse",
                                                                           new CodeSnippetExpression("\"" + className + "\"")))
                },
                new CodeStatement[] // false
                {
                    new CodeAssignStatement(new CodeFieldReferenceExpression(null, "resourceLoader"),
                                            new CodeMethodInvokeExpression(resourceLoaderTypeReferenceExpression,
                                                                           "GetForViewIndependentUse",
                                                                           new CodeSnippetExpression("currentAssemblyName + \"/" + className + "\"")))
                });

            var coreWindowTypeReferenceExpression = new CodeTypeReferenceExpression(
                new CodeTypeReference("Windows.UI.Core.CoreWindow",
                    CodeTypeReferenceOptions.GlobalReference));

            var createResourceLoader = new CodeConditionStatement(
                new CodeBinaryOperatorExpression(
                    new CodeMethodInvokeExpression(coreWindowTypeReferenceExpression, "GetForCurrentThread"),
                    CodeBinaryOperatorType.IdentityEquality,
                    new CodePrimitiveExpression(null)),
                new CodeStatement[] { coreWindowIsNullStatements },
                new CodeStatement[] { coreWindowIsNotNullStatements });

            initializeResourceLoader.Statements.Add(executingAssemblyVar);
            initializeResourceLoader.Statements.Add(executingAssemblyInit);
            initializeResourceLoader.Statements.Add(currentAssemblyVar);
            initializeResourceLoader.Statements.Add(currentAssemblyInit);
            initializeResourceLoader.Statements.Add(currentAssemblySplit);
            initializeResourceLoader.Statements.Add(currentAssemblyInit2);
            initializeResourceLoader.Statements.Add(currentAssemblyInit3);
            initializeResourceLoader.Statements.Add(createResourceLoader);
            targetClass.Members.Add(initializeResourceLoader);

            var resources = ResourceParser.Parse();
            foreach (var item in resources)
            {
                if (string.IsNullOrEmpty(item.Name))
                    continue;

                var property = new CodeMemberProperty
                {
                    Name = item.Name.Replace(".", "_").Trim(),
                    Attributes = MemberAttributes.Public | MemberAttributes.Static,
                    HasGet = true,
                    Type = new CodeTypeReference(typeof(string))
                };

                property.Comments.Add(new CodeCommentStatement("<summary>", true));
                property.Comments.Add(new CodeCommentStatement("Localized resource similar to \"" + (item.Value ?? item.Name) + "\"", true));
                property.Comments.Add(new CodeCommentStatement("</summary>", true));
                property.GetStatements.Add(
                    new CodeMethodReturnStatement(
                        new CodeMethodInvokeExpression(
                            new CodeFieldReferenceExpression(null, "Resource"),
                            "GetString",
                            new CodePrimitiveExpression(item.Name.Replace(".", "/")))));

                targetClass.Members.Add(property);
            }

            codeNamespace.Types.Add(targetClass);
            compileUnit.Namespaces.Add(codeNamespace);

            return GenerateCodeFromCompileUnit();
        }

        private string GenerateCodeFromCompileUnit()
        {
            var options = new CodeGeneratorOptions { BracingStyle = "C" };

            var code = new StringBuilder();

            using (var writer = new StringWriter(code))
                provider.GenerateCodeFromCompileUnit(compileUnit, writer, options);

            return code.ToString();
        }

        #region IDisposable

        private bool disposed;

        public void Dispose()
        {
            Dispose(true);
        }

        ~CodeDomCodeGenerator()
        {
            Dispose(false);
        }

        protected virtual void Dispose(bool dispose)
        {
            if (disposed)
                return;
            disposed = true;

            if (ownsProvider && dispose)
            {
                provider.Dispose();
                GC.SuppressFinalize(this);
            }
        }

        #endregion
    }
}
